input {
    stdin {
    }
    jdbc {
        # mysql 数据库链接,center为数据库名
        jdbc_connection_string => "jdbc:mysql://127.0.0.1:3306/test"
        # 用户名和密码
        jdbc_user => "root"
        jdbc_password => "123456"
        # 驱动
        jdbc_driver_library => "/opt/mysql-connector-java-5.1.47.jar"
        # 驱动类名
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        jdbc_paging_enabled => "true"
        jdbc_page_size => "50000"
        # 执行的sql 就是上一步创建的sql文件的绝对路径+文件名字
        statement_filepath => "/opt/mysql/test.sql"
        # 设置监听间隔  各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新
        schedule => "* * * * *"
        # 索引类型
        type => "t_01"
    }
    jdbc {
        # mysql 数据库链接,center为数据库名
        jdbc_connection_string => "jdbc:mysql://127.0.0.1:3306/test"
        # 用户名和密码
        jdbc_user => "root"
        jdbc_password => "123456"
        # 驱动
        jdbc_driver_library => "/opt/mysql-connector-java-5.1.47.jar"
        # 驱动类名
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        jdbc_paging_enabled => "true"
        jdbc_page_size => "50000"
        # 执行的sql 就是上一步创建的sql文件的绝对路径+文件名字
        statement_filepath => "/opt/mysql/test2.sql"
        # 设置监听间隔  各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新
        schedule => "* * * * *"
        # 索引类型
        type => "t_02"
    }
}


filter {
    json {
        source => "message"
        remove_field => ["message"]
    }
}


output {
    #通过type来进行区分表的数据然后建立索引进行存储
    if[type]=="t_01"{
        elasticsearch {
            # ES的IP地址及端口
            hosts => ["127.0.0.1:9200"]
            # 索引名称
            index => "t_user"
            # 自增ID id必须是待查询的数据表的序列字段
            document_id => "%{id}"
        }
    }
    if[type]=="t_02"{
        elasticsearch {
            # ES的IP地址及端口
            hosts => ["127.0.0.1:9200"]
            # 索引名称
            index => "t_member"
            # 自增ID id必须是待查询的数据表的序列字段
            document_id => "%{uid}"
        }
    }

    stdout {
        # JSON格式输出
        codec => json_lines
    }
}

